"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}
/*!
 * OverlayScrollbars
 * https://github.com/KingSora/OverlayScrollbars
 *
 * Version: 1.13.0
 *
 * Copyright KingSora | Rene Haas.
 * https://github.com/KingSora
 *
 * Released under the MIT license.
 * Date: 02.08.2020
 */!function(t,e){"function"==typeof define&&define.amd?define((function(){return e(t,t.document,void 0)})):"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=e(t,t.document,void 0):e(t,t.document,void 0)}("undefined"!=typeof window?window:void 0,(function(t,e,n){var r,i,o="object",a="function",s="array",c="string",l="boolean",u="number",f="undefined",h="null",d={c:"class",s:"style",i:"id",l:"length",p:"prototype",ti:"tabindex",oH:"offsetHeight",cH:"clientHeight",sH:"scrollHeight",oW:"offsetWidth",cW:"clientWidth",sW:"scrollWidth",hOP:"hasOwnProperty",bCR:"getBoundingClientRect"},p=function(){var r={},i={},o=["-webkit-","-moz-","-o-","-ms-"],a=["WebKit","Moz","O","MS"];function s(t){return t.charAt(0).toUpperCase()+t.slice(1)}return{_cssPrefixes:o,_jsPrefixes:a,_cssProperty:function(t){var r=i[t];if(i[d.hOP](t))return r;for(var a,c,l,u=s(t),f=e.createElement("div")[d.s],h=0;h<o.length;h++)for(l=o[h].replace(/-/g,""),a=[t,o[h]+t,l+u,s(l)+u],c=0;c<a[d.l];c++)if(f[a[c]]!==n){r=a[c];break}return i[t]=r,r},_cssPropertyValue:function(t,n,r){var o=t+" "+n,a=i[o];if(i[d.hOP](o))return a;for(var s,c=e.createElement("div")[d.s],l=n.split(" "),u=r||"",f=0,h=-1;f<l[d.l];f++)for(;h<p._cssPrefixes[d.l];h++)if(s=h<0?l[f]:p._cssPrefixes[h]+l[f],c.cssText=t+":"+s+u,c[d.l]){a=s;break}return i[o]=a,a},_jsAPI:function(e,n,i){var o=0,c=r[e];if(!r[d.hOP](e)){for(c=t[e];o<a[d.l];o++)c=c||t[(n?a[o]:a[o].toLowerCase())+s(e)];r[e]=c}return c||i}}}(),v=function(){function r(n){return n?t.innerWidth||e.documentElement[d.cW]||e.body[d.cW]:t.innerHeight||e.documentElement[d.cH]||e.body[d.cH]}function i(t,e){if(_typeof(t)!=a)throw"Can't bind function!";var n=d.p,r=Array[n].slice.call(arguments,2),i=function(){},o=function(){return t.apply(this instanceof i?this:e,r.concat(Array[n].slice.call(arguments)))};return t[n]&&(i[n]=t[n]),o[n]=new i,o}return{wW:i(r,0,!0),wH:i(r,0),mO:i(p._jsAPI,0,"MutationObserver",!0),rO:i(p._jsAPI,0,"ResizeObserver",!0),rAF:i(p._jsAPI,0,"requestAnimationFrame",!1,(function(e){return t.setTimeout(e,1e3/60)})),cAF:i(p._jsAPI,0,"cancelAnimationFrame",!1,(function(e){return t.clearTimeout(e)})),now:function(){return Date.now&&Date.now()||(new Date).getTime()},stpP:function(t){t.stopPropagation?t.stopPropagation():t.cancelBubble=!0},prvD:function(t){t.preventDefault&&t.cancelable?t.preventDefault():t.returnValue=!1},page:function(t){var r=((t=t.originalEvent||t).target||t.srcElement||e).ownerDocument||e,i=r.documentElement,o=r.body;if(t.touches!==n){var a=t.touches[0];return{x:a.pageX,y:a.pageY}}return!t.pageX&&t.clientX&&null!=t.clientX?{x:t.clientX+(i&&i.scrollLeft||o&&o.scrollLeft||0)-(i&&i.clientLeft||o&&o.clientLeft||0),y:t.clientY+(i&&i.scrollTop||o&&o.scrollTop||0)-(i&&i.clientTop||o&&o.clientTop||0)}:{x:t.pageX,y:t.pageY}},mBtn:function(t){var e=t.button;return t.which||e===n?t.which:1&e?1:2&e?3:4&e?2:0},inA:function(t,e){for(var n=0;n<e[d.l];n++)try{if(e[n]===t)return n}catch(t){}return-1},isA:function(t){var e=Array.isArray;return e?e(t):this.type(t)==s},type:function(t){return t===n||null===t?t+"":Object[d.p].toString.call(t).replace(/^\[object (.+)\]$/,"$1").toLowerCase()},bind:i}}(),m=Math,_=t.jQuery,y=(r={p:m.PI,c:m.cos,s:m.sin,w:m.pow,t:m.sqrt,n:m.asin,a:m.abs,o:1.70158},{swing:function(t,e,n,i,o){return.5-r.c(t*r.p)/2},linear:function(t,e,n,r,i){return t},easeInQuad:function(t,e,n,r,i){return r*(e/=i)*e+n},easeOutQuad:function(t,e,n,r,i){return-r*(e/=i)*(e-2)+n},easeInOutQuad:function(t,e,n,r,i){return(e/=i/2)<1?r/2*e*e+n:-r/2*(--e*(e-2)-1)+n},easeInCubic:function(t,e,n,r,i){return r*(e/=i)*e*e+n},easeOutCubic:function(t,e,n,r,i){return r*((e=e/i-1)*e*e+1)+n},easeInOutCubic:function(t,e,n,r,i){return(e/=i/2)<1?r/2*e*e*e+n:r/2*((e-=2)*e*e+2)+n},easeInQuart:function(t,e,n,r,i){return r*(e/=i)*e*e*e+n},easeOutQuart:function(t,e,n,r,i){return-r*((e=e/i-1)*e*e*e-1)+n},easeInOutQuart:function(t,e,n,r,i){return(e/=i/2)<1?r/2*e*e*e*e+n:-r/2*((e-=2)*e*e*e-2)+n},easeInQuint:function(t,e,n,r,i){return r*(e/=i)*e*e*e*e+n},easeOutQuint:function(t,e,n,r,i){return r*((e=e/i-1)*e*e*e*e+1)+n},easeInOutQuint:function(t,e,n,r,i){return(e/=i/2)<1?r/2*e*e*e*e*e+n:r/2*((e-=2)*e*e*e*e+2)+n},easeInSine:function(t,e,n,i,o){return-i*r.c(e/o*(r.p/2))+i+n},easeOutSine:function(t,e,n,i,o){return i*r.s(e/o*(r.p/2))+n},easeInOutSine:function(t,e,n,i,o){return-i/2*(r.c(r.p*e/o)-1)+n},easeInExpo:function(t,e,n,i,o){return 0==e?n:i*r.w(2,10*(e/o-1))+n},easeOutExpo:function(t,e,n,i,o){return e==o?n+i:i*(1-r.w(2,-10*e/o))+n},easeInOutExpo:function(t,e,n,i,o){return 0==e?n:e==o?n+i:(e/=o/2)<1?i/2*r.w(2,10*(e-1))+n:i/2*(2-r.w(2,-10*--e))+n},easeInCirc:function(t,e,n,i,o){return-i*(r.t(1-(e/=o)*e)-1)+n},easeOutCirc:function(t,e,n,i,o){return i*r.t(1-(e=e/o-1)*e)+n},easeInOutCirc:function(t,e,n,i,o){return(e/=o/2)<1?-i/2*(r.t(1-e*e)-1)+n:i/2*(r.t(1-(e-=2)*e)+1)+n},easeInElastic:function(t,e,n,i,o){var a=r.o,s=0,c=i;return 0==e?n:1==(e/=o)?n+i:(s||(s=.3*o),c<r.a(i)?(c=i,a=s/4):a=s/(2*r.p)*r.n(i/c),-c*r.w(2,10*(e-=1))*r.s((e*o-a)*(2*r.p)/s)+n)},easeOutElastic:function(t,e,n,i,o){var a=r.o,s=0,c=i;return 0==e?n:1==(e/=o)?n+i:(s||(s=.3*o),c<r.a(i)?(c=i,a=s/4):a=s/(2*r.p)*r.n(i/c),c*r.w(2,-10*e)*r.s((e*o-a)*(2*r.p)/s)+i+n)},easeInOutElastic:function(t,e,n,i,o){var a=r.o,s=0,c=i;return 0==e?n:2==(e/=o/2)?n+i:(s||(s=o*(.3*1.5)),c<r.a(i)?(c=i,a=s/4):a=s/(2*r.p)*r.n(i/c),e<1?c*r.w(2,10*(e-=1))*r.s((e*o-a)*(2*r.p)/s)*-.5+n:c*r.w(2,-10*(e-=1))*r.s((e*o-a)*(2*r.p)/s)*.5+i+n)},easeInBack:function(t,e,n,i,o,a){return i*(e/=o)*e*(((a=a||r.o)+1)*e-a)+n},easeOutBack:function(t,e,n,i,o,a){return i*((e=e/o-1)*e*(((a=a||r.o)+1)*e+a)+1)+n},easeInOutBack:function(t,e,n,i,o,a){return a=a||r.o,(e/=o/2)<1?i/2*(e*e*((1+(a*=1.525))*e-a))+n:i/2*((e-=2)*e*((1+(a*=1.525))*e+a)+2)+n},easeInBounce:function(t,e,n,r,i){return r-this.easeOutBounce(t,i-e,0,r,i)+n},easeOutBounce:function(t,e,n,r,i){var o=7.5625;return(e/=i)<1/2.75?r*(o*e*e)+n:e<2/2.75?r*(o*(e-=1.5/2.75)*e+.75)+n:e<2.5/2.75?r*(o*(e-=2.25/2.75)*e+.9375)+n:r*(o*(e-=2.625/2.75)*e+.984375)+n},easeInOutBounce:function(t,e,n,r,i){return e<i/2?.5*this.easeInBounce(t,2*e,0,r,i)+n:.5*this.easeOutBounce(t,2*e-i,0,r,i)+.5*r+n}}),g=function(){var r=/[^\x20\t\r\n\f]+/g,i=" ",h="",p="scrollLeft",_="scrollTop",g=[],b=v.type,w={animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0};function x(){var t,e,r,i,s,c,u=arguments[0]||{},f=1,h=arguments[d.l],p=!1;for(b(u)==l&&(p=u,u=arguments[1]||{},f=2),b(u)!=o&&!b(u)==a&&(u={}),h===f&&(u=R,--f);f<h;f++)if(null!=(s=arguments[f]))for(i in s)t=u[i],u!==(r=s[i])&&(p&&r&&(A(r)||(e=v.isA(r)))?(e?(e=!1,c=t&&v.isA(t)?t:[]):c=t&&A(t)?t:{},u[i]=x(p,c,r)):r!==n&&(u[i]=r));return u}function O(t,e,n){for(var r=n||0;r<e[d.l];r++)if(e[r]===t)return r;return-1}function S(t){return b(t)==a}function C(t){for(var e in t)return!1;return!0}function A(t){if(!t||b(t)!=o)return!1;var e,n=d.p,r=Object[n].hasOwnProperty,i=r.call(t,"constructor"),a=t.constructor&&t.constructor[n]&&r.call(t.constructor[n],"isPrototypeOf");if(t.constructor&&!i&&!a)return!1;for(e in t);return b(e)==f||r.call(t,e)}function L(t,e){var n=0;if(T(t))for(;n<t[d.l]&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t}function T(t){var e=!!t&&[d.l]in t&&t[d.l],n=b(t);return!S(n)&&(n==s||0===e||b(e)==u&&e>0&&e-1 in t)}function z(t){return(t.match(r)||[]).join(i)}function E(t,n){for(var r=(t.parentNode||e).querySelectorAll(n)||[],i=r[d.l];i--;)if(r[i]==t)return!0;return!1}function H(t,e,n){if(v.isA(n))for(var r=0;r<n[d.l];r++)H(t,e,n[r]);else b(n)==c?t.insertAdjacentHTML(e,n):t.insertAdjacentElement(e,n.nodeType?n:n[0])}function P(t,e,r){try{t[d.s][e]!==n&&(t[d.s][e]=function(t,e){w[t.toLowerCase()]||b(e)!=u||(e+="px");return e}(e,r))}catch(t){}}function k(t,e){var n,r;!1!==e&&t.q.splice(0,1),t.q[d.l]>0?(r=t.q[0],I(t.el,r.props,r.duration,r.easing,r.complete,!0)):(n=O(t,g))>-1&&g.splice(n,1)}function W(t,e,n){e===p||e===_?t[e]=n:P(t,e,n)}function I(t,e,r,i,o,a){var s,c,l,u,f,h,b=A(r),w={},x={},L=0;for(b?(i=r.easing,r.start,l=r.progress,u=r.step,f=r.specialEasing,o=r.complete,h=r.duration):h=r,f=f||{},h=h||400,i=i||"swing",a=a||!1;L<g[d.l];L++)if(g[L].el===t){c=g[L];break}for(s in c||(c={el:t,q:[]},g.push(c)),e)w[s]=s===p||s===_?t[s]:R(t).css(s);for(s in w)w[s]!==e[s]&&e[s]!==n&&(x[s]=e[s]);if(C(x))a&&k(c);else{var T,z,E,H,P,I,N,j,D,q=a?0:O(F,c.q),F={props:x,duration:b?r:h,easing:i,complete:o};if(-1===q&&(q=c.q[d.l],c.q.push(F)),0===q)if(h>0)N=v.now(),j=function(){for(s in T=v.now(),D=T-N,z=F.stop||D>=h,E=1-(m.max(0,N+h-T)/h||0),x)H=parseFloat(w[s]),P=parseFloat(x[s]),I=(P-H)*y[f[s]||i](E,E*h,0,1,h)+H,W(t,s,I),S(u)&&u(I,{elem:t,prop:s,start:H,now:I,end:P,pos:E,options:{easing:i,speacialEasing:f,duration:h,complete:o,step:u},startTime:N});S(l)&&l({},E,m.max(0,h-D)),z?(k(c),S(o)&&o()):F.frame=v.rAF()(j)},F.frame=v.rAF()(j);else{for(s in x)W(t,s,x[s]);k(c)}}}function N(t){return!!(t[d.oW]||t[d.oH]||t.getClientRects()[d.l])}function R(n){if(0===arguments[d.l])return this;var r,i,o=new R,a=n,s=0;if(b(n)==c)for(a=[],"<"===n.charAt(0)?((i=e.createElement("div")).innerHTML=n,r=i.children):r=e.querySelectorAll(n);s<r[d.l];s++)a.push(r[s]);if(a){for(b(a)==c||T(a)&&a!==t&&a!==a.self||(a=[a]),s=0;s<a[d.l];s++)o[s]=a[s];o[d.l]=a[d.l]}return o}return R[d.p]={on:function(t,e){var n,i=(t=(t||h).match(r)||[h])[d.l],o=0;return this.each((function(){n=this;try{if(n.addEventListener)for(;o<i;o++)n.addEventListener(t[o],e);else if(n.detachEvent)for(;o<i;o++)n.attachEvent("on"+t[o],e)}catch(t){}}))},off:function(t,e){var n,i=(t=(t||h).match(r)||[h])[d.l],o=0;return this.each((function(){n=this;try{if(n.removeEventListener)for(;o<i;o++)n.removeEventListener(t[o],e);else if(n.detachEvent)for(;o<i;o++)n.detachEvent("on"+t[o],e)}catch(t){}}))},one:function(t,e){return t=(t||h).match(r)||[h],this.each((function(){var n=R(this);R.each(t,(function(t,r){n.on(r,(function t(i){e.call(this,i),n.off(r,t)}))}))}))},trigger:function(t){var n,r;return this.each((function(){n=this,e.createEvent?((r=e.createEvent("HTMLEvents")).initEvent(t,!0,!1),n.dispatchEvent(r)):n.fireEvent("on"+t)}))},append:function(t){return this.each((function(){H(this,"beforeend",t)}))},prepend:function(t){return this.each((function(){H(this,"afterbegin",t)}))},before:function(t){return this.each((function(){H(this,"beforebegin",t)}))},after:function(t){return this.each((function(){H(this,"afterend",t)}))},remove:function(){return this.each((function(){var t=this.parentNode;null!=t&&t.removeChild(this)}))},unwrap:function(){var t,e,n,r=[];for(this.each((function(){-1===O(n=this.parentNode,r)&&r.push(n)})),t=0;t<r[d.l];t++){for(e=r[t],n=e.parentNode;e.firstChild;)n.insertBefore(e.firstChild,e);n.removeChild(e)}return this},wrapAll:function(t){for(var e,n=this,r=R(t)[0],i=r,o=n[0].parentNode,a=n[0].previousSibling;i.childNodes[d.l]>0;)i=i.childNodes[0];for(e=0;n[d.l]-e;i.firstChild===n[0]&&e++)i.appendChild(n[e]);var s=a?a.nextSibling:o.firstChild;return o.insertBefore(r,s),this},wrapInner:function(t){return this.each((function(){var e=R(this),n=e.contents();n[d.l]?n.wrapAll(t):e.append(t)}))},wrap:function(t){return this.each((function(){R(this).wrapAll(t)}))},css:function(e,r){var i,o,a,s=t.getComputedStyle;return b(e)==c?r===n?(i=this[0],a=s?s(i,null):i.currentStyle[e],s?null!=a?a.getPropertyValue(e):i[d.s][e]:a):this.each((function(){P(this,e,r)})):this.each((function(){for(o in e)P(this,o,e[o])}))},hasClass:function(t){for(var e,n,r=0,o=i+t+i;e=this[r++];){if((n=e.classList)&&n.contains(t))return!0;if(1===e.nodeType&&(i+z(e.className+h)+i).indexOf(o)>-1)return!0}return!1},addClass:function(t){var e,o,a,s,c,l,u,f,d=0,p=0;if(t)for(e=t.match(r)||[];o=this[d++];)if(f=o.classList,u===n&&(u=f!==n),u)for(;c=e[p++];)f.add(c);else if(s=o.className+h,a=1===o.nodeType&&i+z(s)+i){for(;c=e[p++];)a.indexOf(i+c+i)<0&&(a+=c+i);s!==(l=z(a))&&(o.className=l)}return this},removeClass:function(t){var e,o,a,s,c,l,u,f,d=0,p=0;if(t)for(e=t.match(r)||[];o=this[d++];)if(f=o.classList,u===n&&(u=f!==n),u)for(;c=e[p++];)f.remove(c);else if(s=o.className+h,a=1===o.nodeType&&i+z(s)+i){for(;c=e[p++];)for(;a.indexOf(i+c+i)>-1;)a=a.replace(i+c+i,i);s!==(l=z(a))&&(o.className=l)}return this},hide:function(){return this.each((function(){this[d.s].display="none"}))},show:function(){return this.each((function(){this[d.s].display="block"}))},attr:function(t,e){for(var r,i=0;r=this[i++];){if(e===n)return r.getAttribute(t);r.setAttribute(t,e)}return this},removeAttr:function(t){return this.each((function(){this.removeAttribute(t)}))},offset:function(){var n=this[0][d.bCR](),r=t.pageXOffset||e.documentElement.scrollLeft,i=t.pageYOffset||e.documentElement.scrollTop;return{top:n.top+i,left:n.left+r}},position:function(){var t=this[0];return{top:t.offsetTop,left:t.offsetLeft}},scrollLeft:function(t){for(var e,r=0;e=this[r++];){if(t===n)return e.scrollLeft;e.scrollLeft=t}return this},scrollTop:function(t){for(var e,r=0;e=this[r++];){if(t===n)return e.scrollTop;e.scrollTop=t}return this},val:function(t){var e=this[0];return t?(e.value=t,this):e.value},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){return R(this[t>=0?t:this[d.l]+t])},find:function(t){var e,n=[];return this.each((function(){var r=this.querySelectorAll(t);for(e=0;e<r[d.l];e++)n.push(r[e])})),R(n)},children:function(t){var e,n,r,i=[];return this.each((function(){for(n=this.children,r=0;r<n[d.l];r++)e=n[r],t?(e.matches&&e.matches(t)||E(e,t))&&i.push(e):i.push(e)})),R(i)},parent:function(t){var e,n=[];return this.each((function(){e=this.parentNode,t&&!R(e).is(t)||n.push(e)})),R(n)},is:function(t){var e,n;for(n=0;n<this[d.l];n++){if(e=this[n],":visible"===t)return N(e);if(":hidden"===t)return!N(e);if(e.matches&&e.matches(t)||E(e,t))return!0}return!1},contents:function(){var t,e,n=[];return this.each((function(){for(t=this.childNodes,e=0;e<t[d.l];e++)n.push(t[e])})),R(n)},each:function(t){return L(this,t)},animate:function(t,e,n,r){return this.each((function(){I(this,t,e,n,r)}))},stop:function(t,e){return this.each((function(){!function(t,e,n){for(var r,i,o,a=0;a<g[d.l];a++)if((r=g[a]).el===t){if(r.q[d.l]>0){if((i=r.q[0]).stop=!0,v.cAF()(i.frame),r.q.splice(0,1),n)for(o in i.props)W(t,o,i.props[o]);e?r.q=[]:k(r,!1)}break}}(this,t,e)}))}},x(R,{extend:x,inArray:O,isEmptyObject:C,isPlainObject:A,each:L}),R}(),b=(i=[],function(t,e){var n=arguments[d.l];if(n<1)return i;if(e)t.__overlayScrollbars__=e,i.push(t);else{var r=v.inA(t,i);if(r>-1){if(!(n>1))return i[r].__overlayScrollbars__;delete t.__overlayScrollbars__,i.splice(r,1)}}}),w=function(){var r,i,f,y,w,x,O,S,C,A,L,T=[],z=(y=v.type,w=[l,u,c,s,o,a,h],A={className:["os-theme-dark",[h,c]],resize:["none","n:none b:both h:horizontal v:vertical"],sizeAutoCapable:x=[!0,l],clipAlways:x,normalizeRTL:x,paddingAbsolute:O=[!1,l],autoUpdate:[null,[h,l]],autoUpdateInterval:[33,u],updateOnLoad:[["img"],[c,s,h]],nativeScrollbarsOverlaid:{showNativeScrollbars:O,initialize:x},overflowBehavior:{x:["scroll",C="v-h:visible-hidden v-s:visible-scroll s:scroll h:hidden"],y:["scroll",C]},scrollbars:{visibility:["auto","v:visible h:hidden a:auto"],autoHide:["never","n:never s:scroll l:leave m:move"],autoHideDelay:[800,u],dragScrolling:x,clickScrolling:O,touchSupport:x,snapHandle:O},textarea:{dynWidth:O,dynHeight:O,inheritedAttrs:[["style","class"],[c,s,h]]},callbacks:{onInitialized:S=[null,[h,a]],onInitializationWithdrawn:S,onDestroyed:S,onScrollStart:S,onScroll:S,onScrollStop:S,onOverflowChanged:S,onOverflowAmountChanged:S,onDirectionChanged:S,onContentSizeChanged:S,onHostSizeChanged:S,onUpdated:S}},{_defaults:(L=function(t){return function e(n){var r,i,a;for(r in n)n[d.hOP](r)&&(i=n[r],(a=y(i))==s?n[r]=i[t?1:0]:a==o&&(n[r]=e(i)));return n}(g.extend(!0,{},A))})(),_template:L(!0),_validate:function(e,r,i,a){var s={},l={},u=g.extend(!0,{},e),f=g.inArray,h=g.isEmptyObject;return function t(e,r,a,s,l,u){for(var p in r)if(r[d.hOP](p)&&e[d.hOP](p)){var m,_,b,x,O,S,C,A,L=!1,T=!1,z=r[p],E=y(z),H=E==o,P=v.isA(z)?z:[z],k=a[p],W=e[p],I=y(W),N=u?u+".":"",R='The option "'+N+p+"\" wasn't set, because",j=[],D=[];if(k=k===n?{}:k,H&&I==o)s[p]={},l[p]={},t(W,z,k,s[p],l[p],N+p),g.each([e,s,l],(function(t,e){h(e[p])&&delete e[p]}));else if(!H){for(S=0;S<P[d.l];S++)if(O=P[S],b=(E=y(O))==c&&-1===f(O,w))for(j.push(c),m=O.split(" "),D=D.concat(m),C=0;C<m[d.l];C++){for(x=(_=m[C].split(":"))[0],A=0;A<_[d.l];A++)if(W===_[A]){L=!0;break}if(L)break}else if(j.push(O),I===O){L=!0;break}L?((T=W!==k)&&(s[p]=W),(b?f(k,_)<0:T)&&(l[p]=b?x:W)):i&&console.warn(R+" it doesn't accept the type [ "+I.toUpperCase()+' ] with the value of "'+W+'".\r\nAccepted types are: [ '+j.join(", ").toUpperCase()+" ]."+(D[length]>0?"\r\nValid strings are: [ "+D.join(", ").split(":").join(", ")+" ].":"")),delete e[p]}}}(u,r,a||{},s,l),!h(u)&&i&&console.warn("The following options are discarded due to invalidity:\r\n"+t.JSON.stringify(u,null,2)),{_default:s,_prepared:l}}});function E(){i||(i=new H(z._defaults)),f||(f=new P(i))}function H(e){var n=this,r="overflow",i="hidden",o=g("body"),a=g('<div id="os-dummy-scrollbar-size"><div></div></div>'),s=a[0],c=g(a.children("div").eq(0));o.append(a),a.hide().show();var l=h(s),u={x:0===l.x,y:0===l.y},f=function(){var e,n=t.navigator.userAgent,r=n.indexOf("MSIE "),i=n.indexOf("Trident/"),o=n.indexOf("Edge/"),a=n.indexOf("rv:"),s=parseInt;return r>0?e=s(n.substring(r+5,n.indexOf(".",r)),10):i>0?e=s(n.substring(a+3,n.indexOf(".",a)),10):o>0&&(e=s(n.substring(o+5,n.indexOf(".",o)),10)),e}();function h(t){return{x:t[d.oH]-t[d.cH],y:t[d.oW]-t[d.cW]}}g.extend(n,{defaultOptions:e,msie:f,autoUpdateLoop:!1,autoUpdateRecommended:!v.mO(),nativeScrollbarSize:l,nativeScrollbarIsOverlaid:u,nativeScrollbarStyling:function(){var e=!1;a.addClass("os-viewport-native-scrollbars-invisible");try{e="none"===a.css("scrollbar-width")&&(f>9||!f)||"none"===t.getComputedStyle(s,"::-webkit-scrollbar").getPropertyValue("display")}catch(t){}return e}(),overlayScrollbarDummySize:{x:30,y:30},cssCalc:p._cssPropertyValue("width","calc","(1px)")||null,restrictedMeasuring:function(){a.css(r,i);var t=s[d.sW],e=s[d.sH];a.css(r,"visible");var n=s[d.sW],o=s[d.sH];return t-n!=0||e-o!=0}(),rtlScrollBehavior:function(){a.css({"overflow-y":i,"overflow-x":"scroll",direction:"rtl"}).scrollLeft(0);var t=a.offset(),e=c.offset();a.scrollLeft(-999);var n=c.offset();return{i:t.left===e.left,n:e.left!==n.left}}(),supportTransform:!!p._cssProperty("transform"),supportTransition:!!p._cssProperty("transition"),supportPassiveEvents:function(){var e=!1;try{t.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){e=!0}}))}catch(t){}return e}(),supportResizeObserver:!!v.rO(),supportMutationObserver:!!v.mO()}),a.removeAttr(d.s).remove(),function(){if(!u.x||!u.y){var e=m.abs,r=v.wW(),i=v.wH(),s=c();g(t).on("resize",(function(){if(b().length>0){var t=v.wW(),l=v.wH(),u=t-r,f=l-i;if(0===u&&0===f)return;var d,p=m.round(t/(r/100)),_=m.round(l/(i/100)),y=e(u),w=e(f),x=e(p),O=e(_),S=c(),C=y>2&&w>2,A=(z=O,E=e(x),H=e(z),!(E!==H&&E+1!==H&&E-1!==H)),L=C&&A&&(S!==s&&s>0),T=n.nativeScrollbarSize;L&&(o.append(a),d=n.nativeScrollbarSize=h(a[0]),a.remove(),T.x===d.x&&T.y===d.y||g.each(b(),(function(){b(this)&&b(this).update("zoom")}))),r=t,i=l,s=S}var z,E,H}))}function c(){var e=t.screen.deviceXDPI||0,n=t.screen.logicalXDPI||1;return t.devicePixelRatio||e/n}}()}function P(t){var e,r=g.inArray,i=v.now,o=d.l,a=[],s=[],c=!1,l=33,u=i(),f=function t(){if(a[o]>0&&c){e=v.rAF()((function(){t()}));var r,f,h,d,p,_,y=i(),g=y-u;if(g>l){u=y-g%l,r=33;for(var b=0;b<a[o];b++)(f=a[b])!==n&&(d=(h=f.options()).autoUpdate,p=m.max(1,h.autoUpdateInterval),_=i(),(!0===d||null===d)&&_-s[b]>p&&(f.update("auto"),s[b]=new Date(_+=p)),r=m.max(1,m.min(r,p)));l=r}}else l=33};this.add=function(e){-1===r(e,a)&&(a.push(e),s.push(i()),a[o]>0&&!c&&(c=!0,t.autoUpdateLoop=c,f()))},this.remove=function(i){var l=r(i,a);l>-1&&(s.splice(l,1),a.splice(l,1),0===a[o]&&c&&(c=!1,t.autoUpdateLoop=c,e!==n&&(v.cAF()(e),e=-1)))}}function k(i,f,h,y,w){var x=v.type,O=g.inArray,S=g.each,C=new r,A=g[d.p];if(ei(i)){if(b(i)){var L=b(i);return L.options(f),L}var T,E,H,P,k,W,I,N,R,j,D,q,F,B,M,U,X,V,Y,Q,$,K,G,J,Z,tt,et,nt,rt,it,ot,at,st,ct,lt,ut,ft,ht,dt,pt,vt,mt,_t,yt,gt,bt,wt,xt,Ot,St,Ct,At,Lt,Tt,zt,Et,Ht,Pt,kt,Wt,It,Nt,Rt,jt,Dt,qt,Ft,Bt,Mt,Ut,Xt,Vt,Yt,Qt,$t,Kt,Gt,Jt,Zt,te,ee,ne,re,ie,oe,ae,se,ce,le,ue,fe,he,de,pe,ve,me,_e,ye,ge,be,we,xe,Oe,Se,Ce,Ae,Le,Te,ze,Ee,He,Pe,ke,We,Ie,Ne,Re,je,De,qe,Fe={},Be={},Me={},Ue={},Xe={},Ve="-hidden",Ye="margin-",Qe="padding-",$e="border-",Ke="top",Ge="right",Je="bottom",Ze="left",tn="width",en="height",nn="float",rn="",on="auto",an="sync",sn="scroll",cn="100%",ln="x",un="y",fn=".",hn=" ",dn="scrollbar",pn="-horizontal",vn="-vertical",mn="mousedown touchstart",_n="mouseup touchend touchcancel",yn="mousemove touchmove",gn="mouseenter",bn="mouseleave",wn="keydown",xn="keyup",On="selectstart",Sn="transitionend webkitTransitionEnd oTransitionEnd",Cn="os-html",An="os-host",Ln=An+"-foreign",Tn=An+"-textarea",zn=An+"-"+dn+pn+Ve,En=An+"-"+dn+vn+Ve,Hn=An+"-transition",Pn=An+"-rtl",kn=An+"-resize-disabled",Wn=An+"-scrolling",In=An+"-overflow",Nn=(In=An+"-overflow")+"-x",Rn=In+"-y",jn="os-textarea",Dn=jn+"-cover",qn="os-padding",Fn="os-viewport",Bn="os-viewport-native-scrollbars-invisible",Mn="os-viewport-native-scrollbars-overlaid",Un="os-content",Xn="os-resize-observer",Vn="os-resize-observer-item",Yn="os-resize-observer-item-final",Qn="os-text-inherit",$n="os-scrollbar-track",Kn="os-scrollbar-track-off",Gn="os-scrollbar-handle",Jn="os-scrollbar-handle-off",Zn="os-scrollbar-unusable",tr="os-scrollbar-auto-hidden",er="os-scrollbar-corner",nr="os-scrollbar-corner-resize",rr=nr+"-both",ir=nr+pn,or=nr+vn,ar="os-dragging",sr="os-theme-none",cr=[Bn,Mn,Kn,Jn,Zn,tr,nr,rr,ir,or,ar].join(hn),lr=[],ur=[d.ti],fr={},hr={},dr="load",pr=[],vr={},mr=["wrap","cols","rows"],_r=[d.i,d.c,d.s,"open"].concat(ur),yr=[];return C.sleep=function(){rt=!0},C.update=function(t){var e,r,i,o,a;if(!M)return x(t)==c?t===on?(e=function(){if(!rt&&!Ae){var t,e,r,i=[],o=[{_elem:pt,_attrs:_r.concat(":visible")},{_elem:U?dt:n,_attrs:mr}];return S(o,(function(n,o){(t=o._elem)&&S(o._attrs,(function(n,o){e=":"===o.charAt(0)?t.is(o):t.attr(o),r=vr[o],ui(e,r)&&i.push(o),vr[o]=e}))})),Wr(i),i[d.l]>0}}(),r=function(){if(rt)return!1;var t,e,n,r,i=ii(),o=U&&Ut&&!me?dt.val().length:0,a=!Ae&&Ut&&!U,s={};return a&&(t=gt.css(nn),s.float=nt?Ge:Ze,s.width=on,gt.css(s)),r={w:i[d.sW]+o,h:i[d.sH]+o},a&&(s.float=t,s.width=cn,gt.css(s)),e=Pr(),n=ui(r,ae),ae=r,n||e}(),(i=e||r)&&Nr({_contentSizeChanged:r,_changedOptions:B?n:at})):t===an?Ae?(o=Se(xe.takeRecords()),a=Ce(Oe.takeRecords())):o=C.update(on):"zoom"===t&&Nr({_hostSizeChanged:!0,_contentSizeChanged:!0}):(t=rt||t,rt=!1,C.update(an)&&!t||Nr({_force:t})),Rr(),i||o||a},C.options=function(t,e){var n,r={};if(g.isEmptyObject(t)||!g.isPlainObject(t)){if(x(t)!=c)return ot;if(!(arguments.length>1))return si(ot,t);ci(r,t,e),n=jr(r)}else n=jr(t);g.isEmptyObject(n)||Nr({_changedOptions:n})},C.destroy=function(){if(!M){for(var t in w.remove(C),Sr(),wr(mt),wr(vt),fr)C.removeExt(t);for(;yr[d.l]>0;)yr.pop()();Hr(!0),wt&&vi(wt),bt&&vi(bt),$&&vi(vt),Fr(!0),$r(!0),Dr(!0);for(var e=0;e<pr[d.l];e++)g(pr[e]).off(dr,Er);pr=n,M=!0,rt=!0,b(i,0),Kr("onDestroyed")}},C.scroll=function(t,e,r,i){if(0===arguments.length||t===n){var f=Be,h=Me,p=de&&nt&&H.i,y=de&&nt&&H.n,b=f._currentScroll,w=f._currentScrollRatio,S=f._maxScroll;return w=p?1-w:w,b=p?S-b:b,S*=y?-1:1,{position:{x:b*=y?-1:1,y:h._currentScroll},ratio:{x:w,y:h._currentScrollRatio},max:{x:S,y:h._maxScroll},handleOffset:{x:f._handleOffset,y:h._handleOffset},handleLength:{x:f._handleLength,y:h._handleLength},handleLengthRatio:{x:f._handleLengthRatio,y:h._handleLengthRatio},trackLength:{x:f._trackLength,y:h._trackLength},snappedHandleOffset:{x:f._snappedHandleOffset,y:h._snappedHandleOffset},isRTL:nt,isRTLNormalized:de}}C.update(an);var A,L,T,z,E,P,k,W,I,N=de,R=[ln,Ze,"l"],D=[un,Ke,"t"],q=["+=","-=","*=","/="],F=x(e)==o,B=F?e.complete:i,M={},U={},X="end",V="begin",Y="center",Q="nearest",$="always",K="never",G="ifneeded",J=d.l,Z=[ln,un,"xy","yx"],tt=[V,X,Y,Q],et=[$,K,G],rt=t[d.hOP]("el"),it=rt?t.el:t,ot=!!(it instanceof g||_)&&it instanceof _,at=!ot&&ei(it),st=function(){L&&Vr(!0),T&&Vr(!1)},ct=x(B)!=a?n:function(){st(),B()};function lt(t,e){for(A=0;A<e[J];A++)if(t===e[A])return!0;return!1}function ut(t,e){var n=t?R:D;if(e=x(e)==c||x(e)==u?[e,e]:e,v.isA(e))return t?e[0]:e[1];if(x(e)==o)for(A=0;A<n[J];A++)if(n[A]in e)return e[n[A]]}function ft(t,e){var r,i,o,a,s=x(e)==c,l=t?Be:Me,f=l._currentScroll,h=l._maxScroll,d=" * ",p=nt&&t,v=p&&H.n&&!N,_=eval;if(s?(e[J]>2&&(a=e.substr(0,2),O(a,q)>-1&&(r=a)),e=(e=r?e.substr(2):e).replace(/min/g,0).replace(/</g,0).replace(/max/g,(v?"-":rn)+cn).replace(/>/g,(v?"-":rn)+cn).replace(/px/g,rn).replace(/%/g,d+h*(p&&H.n?-1:1)/100).replace(/vw/g,d+Ue.w).replace(/vh/g,d+Ue.h),i=ni(isNaN(e)?ni(_(e),!0).toFixed():e)):i=e,i!==n&&!isNaN(i)&&x(i)==u){var y=N&&p,g=f*(y&&H.n?-1:1),b=y&&H.i,w=y&&H.n;switch(g=b?h-g:g,r){case"+=":o=g+i;break;case"-=":o=g-i;break;case"*=":o=g*i;break;case"/=":o=g/i;break;default:o=i}o=b?h-o:o,o*=w?-1:1,o=p&&H.n?m.min(0,m.max(h,o)):m.max(0,m.min(h,o))}return o===f?n:o}function ht(t,e,n,r){var i,a,c=[n,n],l=x(t);if(l==e)t=[t,t];else if(l==s){if((i=t[J])>2||i<1)t=c;else for(1===i&&(t[1]=n),A=0;A<i;A++)if(a=t[A],x(a)!=e||!lt(a,r)){t=c;break}}else t=l==o?[t.x||n,t.y||n]:c;return{x:t[0],y:t[1]}}function dt(t){var e,n,r=[],i=[Ke,Ge,Je,Ze];for(A=0;A<t[J]&&A!==i[J];A++)e=t[A],(n=x(e))==l?r.push(e?ni(I.css(Ye+i[A])):0):r.push(n==u?e:0);return r}if(ot||at){var pt,vt=rt?t.margin:0,mt=rt?t.axis:0,gt=rt?t.scroll:0,bt=rt?t.block:0,wt=[0,0,0,0],xt=x(vt);if((I=ot?it:g(it))[J]>0){vt=xt==u||xt==l?dt([vt,vt,vt,vt]):xt==s?2===(pt=vt[J])?dt([vt[0],vt[1],vt[0],vt[1]]):pt>=4?dt(vt):wt:xt==o?dt([vt.top,vt.right,vt.bottom,vt.left]):wt,E=lt(mt,Z)?mt:"xy",P=ht(gt,c,$,et),k=ht(bt,c,V,tt),W=vt;var Ot={l:Be._currentScroll,t:Me._currentScroll},St=_t.offset(),Ct=I.offset(),At={x:P.x==K||E==un,y:P.y==K||E==ln};Ct.top-=W[0],Ct.left-=W[3];var Lt={x:m.round(Ct.left-St.left+Ot.l),y:m.round(Ct.top-St.top+Ot.t)};if(nt&&(H.n||H.i||(Lt.x=m.round(St.left-Ct.left+Ot.l)),H.n&&N&&(Lt.x*=-1),H.i&&N&&(Lt.x=m.round(St.left-Ct.left+(Be._maxScroll-Ot.l)))),k.x!=V||k.y!=V||P.x==G||P.y==G||nt){var Tt=I[0],zt=j?Tt[d.bCR]():{width:Tt[d.oW],height:Tt[d.oH]},Et={w:zt.width+W[3]+W[1],h:zt.height+W[0]+W[2]},Ht=function(t){var e=Qr(t),n=e._w_h,r=e._left_top,i=e._x_y,o=k[i]==(t&&nt?V:X),a=k[i]==Y,s=k[i]==Q,c=P[i]==K,l=P[i]==G,u=Ue[n],f=St[r],h=Et[n],d=Ct[r],p=a?2:1,v=d+h/2,m=f+u/2,_=h<=u&&d>=f&&d+h<=f+u;c?At[i]=!0:At[i]||((s||l)&&(At[i]=!!l&&_,o=h<u?v>m:v<m),Lt[i]-=o||a?(u/p-h/p)*(t&&nt&&N?-1:1):0)};Ht(!0),Ht(!1)}At.y&&delete Lt.y,At.x&&delete Lt.x,t=Lt}}M.scrollLeft=ft(!0,ut(!0,t)),M.scrollTop=ft(!1,ut(!1,t)),L=M.scrollLeft!==n,T=M.scrollTop!==n,(L||T)&&(e>0||F)?F?(e.complete=ct,yt.animate(M,e)):(z={duration:e,complete:ct},v.isA(r)||g.isPlainObject(r)?(U.scrollLeft=r[0]||r.x,U.scrollTop=r[1]||r.y,z.specialEasing=U):z.easing=r,yt.animate(M,z)):(L&&yt.scrollLeft(M.scrollLeft),T&&yt.scrollTop(M.scrollTop),st())},C.scrollStop=function(t,e,n){return yt.stop(t,e,n),C},C.getElements=function(t){var e={target:Pt,host:kt,padding:Nt,viewport:Rt,content:jt,scrollbarHorizontal:{scrollbar:St[0],track:Ct[0],handle:At[0]},scrollbarVertical:{scrollbar:Lt[0],track:Tt[0],handle:zt[0]},scrollbarCorner:Ot[0]};return x(t)==c?si(e,t):e},C.getState=function(t){function e(t){if(!g.isPlainObject(t))return t;var e=fi({},t),n=function(t,n){e[d.hOP](t)&&(e[n]=e[t],delete e[t])};return n("w",tn),n("h",en),delete e.c,e}var n={destroyed:!!e(M),sleeping:!!e(rt),autoUpdate:e(!Ae),widthAuto:e(Ut),heightAuto:e(Xt),padding:e(Yt),overflowAmount:e(ne),hideOverflow:e(Mt),hasOverflow:e(Bt),contentScrollSize:e(qt),viewportSize:e(Ue),hostSize:e(Dt),documentMixed:e(V)};return x(t)==c?si(n,t):n},C.ext=function(t){var e,n="added removed on contract".split(" "),r=0;if(x(t)==c){if(fr[d.hOP](t))for(e=fi({},fr[t]);r<n.length;r++)delete e[n[r]]}else for(r in e={},fr)e[r]=fi({},C.ext(r));return e},C.addExt=function(e,n){var i,o,s,c,u=r.extension(e),f=!0;if(u){if(fr[d.hOP](e))return C.ext(e);if((i=u.extensionFactory.call(C,fi({},u.defaultOptions),g,v))&&(s=i.contract,x(s)==a&&(c=s(t),f=x(c)==l?c:f),f))return fr[e]=i,o=i.added,x(o)==a&&o(n),C.ext(e)}else console.warn('A extension with the name "'+e+"\" isn't registered.")},C.removeExt=function(t){var e,n=fr[t];return!!n&&(delete fr[t],e=n.removed,x(e)==a&&e(),!0)},r.valid(function(t,r,i){var o,a;return it=y.defaultOptions,W=y.nativeScrollbarStyling,N=fi({},y.nativeScrollbarSize),T=fi({},y.nativeScrollbarIsOverlaid),E=fi({},y.overlayScrollbarDummySize),H=fi({},y.rtlScrollBehavior),jr(fi({},it,r)),I=y.cssCalc,k=y.msie,P=y.autoUpdateRecommended,R=y.supportTransition,j=y.supportTransform,D=y.supportPassiveEvents,q=y.supportResizeObserver,F=y.supportMutationObserver,y.restrictedMeasuring,ut=g(t.ownerDocument),Ht=ut[0],lt=g(Ht.defaultView||Ht.parentWindow),Et=lt[0],ft=mi(ut,"html"),ht=mi(ft,"body"),dt=g(t),Pt=dt[0],U=dt.is("textarea"),X=dt.is("body"),V=Ht!==e,Y=U?dt.hasClass(jn)&&dt.parent().hasClass(Un):dt.hasClass(An)&&dt.children(".os-padding")[d.l],T.x&&T.y&&!at.nativeScrollbarsOverlaid.initialize?(Kr("onInitializationWithdrawn"),Y&&(Dr(!0),Fr(!0),$r(!0)),M=!0,rt=!0,C):(X&&((o={}).l=m.max(dt.scrollLeft(),ft.scrollLeft(),lt.scrollLeft()),o.t=m.max(dt.scrollTop(),ft.scrollTop(),lt.scrollTop()),a=function(){yt.removeAttr(d.ti),gr(yt,mn,a,!0,!0)}),Dr(),Fr(),$r(),qr(),Br(!0),Br(!1),function(){var t,e=Et.top!==Et,r={},i={},o={};function a(t){if(c(t)){var e=l(t),n={};(De||je)&&(n.width=i.w+(e.x-r.x)*o.x),(qe||je)&&(n.height=i.h+(e.y-r.y)*o.y),pt.css(n),v.stpP(t)}else s(t)}function s(e){var r=e!==n;gr(ut,[On,yn,_n],[zr,a,s],!0),di(ht,ar),Ot.releaseCapture&&Ot.releaseCapture(),r&&(t&&Or(),C.update(on)),t=!1}function c(t){var e=(t.originalEvent||t).touches!==n;return!rt&&!M&&(1===v.mBtn(t)||e)}function l(t){return k&&e?{x:t.screenX,y:t.screenY}:v.page(t)}br(Ot,mn,(function(e){c(e)&&!Re&&(Ae&&(t=!0,Sr()),r=l(e),i.w=kt[d.oW]-(Q?0:K),i.h=kt[d.oH]-(Q?0:G),o=ti(),gr(ut,[On,yn,_n],[zr,a,s]),hi(ht,ar),Ot.setCapture&&Ot.setCapture(),v.prvD(e),v.stpP(e))}))}(),xr(),wr(mt,Cr),X&&(yt.scrollLeft(o.l).scrollTop(o.t),e.activeElement==t&&Rt.focus&&(yt.attr(d.ti,"-1"),Rt.focus(),gr(yt,mn,a,!1,!0))),C.update(on),B=!0,Kr("onInitialized"),S(lr,(function(t,e){Kr(e.n,e.a)})),lr=[],x(i)==c&&(i=[i]),v.isA(i)?S(i,(function(t,e){C.addExt(e)})):g.isPlainObject(i)&&S(i,(function(t,e){C.addExt(t,e)})),setTimeout((function(){R&&!M&&hi(pt,Hn)}),333),C)}(i,f,h))&&b(i,C),C}function gr(t,e,n,r,i){var o=v.isA(e)&&v.isA(n),a=r?"removeEventListener":"addEventListener",s=r?"off":"on",c=!o&&e.split(hn),l=0,u=g.isPlainObject(i),f=D&&(u?i._passive:i)||!1,h=u&&(i._capture||!1),p=D?{passive:f,capture:h}:h;if(o)for(;l<e[d.l];l++)gr(t,e[l],n[l],r,i);else for(;l<c[d.l];l++)D?t[0][a](c[l],n,p):t[s](c[l],n)}function br(t,e,n,r){gr(t,e,n,!1,r),yr.push(v.bind(gr,0,t,e,n,!0,r))}function wr(t,e){if(t){var r=v.rO(),i="animationstart mozAnimationStart webkitAnimationStart MSAnimationStart",a=3333333,s=function(){t.scrollTop(a).scrollLeft(nt?H.n?-3333333:H.i?0:a:a),e()};if(e){if(q)((I=t.addClass("observed").append(oi(Xn)).contents()[0]).__overlayScrollbarsRO__=new r(s)).observe(I);else if(k>9||!P){t.prepend(oi(Xn,oi({c:Vn,dir:"ltr"},oi(Vn,oi(Yn))+oi(Vn,oi({c:Yn,style:"width: 200%; height: 200%"})))));var c,l,u,f,h=t[0].childNodes[0].childNodes[0],p=g(h.childNodes[1]),m=g(h.childNodes[0]),_=g(m[0].childNodes[0]),b=h[d.oW],w=h[d.oH],x=y.nativeScrollbarSize,O=function(){m.scrollLeft(a).scrollTop(a),p.scrollLeft(a).scrollTop(a)},S=function(){l=0,c&&(b=u,w=f,s())},C=function(t){return u=h[d.oW],f=h[d.oH],c=u!=b||f!=w,t&&c&&!l?(v.cAF()(l),l=v.rAF()(S)):t||S(),O(),t&&(v.prvD(t),v.stpP(t)),!1},A={},L={};Gr(L,rn,[-2*(x.y+1),-2*x.x,-2*x.y,-2*(x.x+1)]),g(h).css(L),m.on(sn,C),p.on(sn,C),t.on(i,(function(){C(!1)})),A.width=a,A.height=a,_.css(A),O()}else{var T=Ht.attachEvent,z=k!==n;if(T)t.prepend(oi(Xn)),mi(t,".os-resize-observer")[0].attachEvent("onresize",s);else{var E=Ht.createElement(o);E.setAttribute(d.ti,"-1"),E.setAttribute(d.c,Xn),E.onload=function(){var t=this.contentDocument.defaultView;t.addEventListener("resize",s),t.document.documentElement.style.display="none"},E.type="text/html",z&&t.prepend(E),E.data="about:blank",z||t.prepend(E),t.on(i,s)}}if(t[0]===It){var W=function(){var t=pt.css("direction"),e={},n=0,r=!1;return t!==Gt&&("ltr"===t?(e.left=0,e.right=on,n=a):(e.left=on,e.right=0,n=H.n?-3333333:H.i?0:a),mt.children().eq(0).css(e),mt.scrollLeft(n).scrollTop(a),Gt=t,r=!0),r};W(),br(t,sn,(function(t){return W()&&Nr(),v.prvD(t),v.stpP(t),!1}))}}else if(q){var I,N=(I=t.contents()[0]).__overlayScrollbarsRO__;N&&(N.disconnect(),delete I.__overlayScrollbarsRO__)}else vi(t.children(".os-resize-observer").eq(0))}}function xr(){if(F){var t,e,n,r,i,o,s,c,l,u,f=v.mO(),h=v.now();Ce=function(t){var e=!1;return B&&!rt&&(S(t,(function(){return!(e=function(t){var e=t.attributeName,n=t.target,r=t.type,i="closest";if(n===jt)return null===e;if("attributes"===r&&(e===d.c||e===d.s)&&!U){if(e===d.c&&g(n).hasClass(An))return kr(t.oldValue,n.className);if(_typeof(n[i])!=a)return!0;if(null!==n[i](".os-resize-observer")||null!==n[i](".os-scrollbar")||null!==n[i](".os-scrollbar-corner"))return!1}return!0}(this))})),e&&(c=v.now(),l=Xt||Ut,u=function(){M||(h=c,U&&Ir(),l?Nr():C.update(on))},clearTimeout(s),c-h>11||!l?u():s=setTimeout(u,11))),e},xe=new f(Se=function(a){var s,c=!1,l=!1,u=[];return B&&!rt&&(S(a,(function(){t=(s=this).target,e=s.attributeName,n=e===d.c,r=s.oldValue,i=t.className,Y&&n&&!l&&r.indexOf(Ln)>-1&&i.indexOf(Ln)<0&&(o=Zr(!0),kt.className=i.split(hn).concat(r.split(hn).filter((function(t){return t.match(o)}))).join(hn),c=l=!0),c||(c=n?kr(r,i):e!==d.s||r!==t[d.s].cssText),u.push(e)})),Wr(u),c&&C.update(l||on)),c}),Oe=new f(Ce)}}function Or(){F&&!Ae&&(xe.observe(kt,{attributes:!0,attributeOldValue:!0,attributeFilter:_r}),Oe.observe(U?Pt:jt,{attributes:!0,attributeOldValue:!0,subtree:!U,childList:!U,characterData:!U,attributeFilter:U?mr:_r}),Ae=!0)}function Sr(){F&&Ae&&(xe.disconnect(),Oe.disconnect(),Ae=!1)}function Cr(){if(!rt){var t,e={w:It[d.sW],h:It[d.sH]};t=ui(e,se),se=e,t&&Nr({_hostSizeChanged:!0})}}function Ar(){We&&Ur(!0)}function Lr(){We&&!ht.hasClass(ar)&&Ur(!1)}function Tr(){ke&&(Ur(!0),clearTimeout(ze),ze=setTimeout((function(){ke&&!M&&Ur(!1)}),100))}function zr(t){return v.prvD(t),!1}function Er(t){var e=g(t.target);li((function(t,n){e.is(n)&&Nr({_contentSizeChanged:!0})}))}function Hr(t){t||Hr(!0),gr(pt,yn.split(hn)[0],Tr,!ke||t,!0),gr(pt,[gn,bn],[Ar,Lr],!We||t,!0),B||t||pt.one("mouseover",Ar)}function Pr(){var t={};return X&&bt&&(t.w=ni(bt.css("min-width")),t.h=ni(bt.css("min-height")),t.c=ui(t,we),t.f=!0),we=t,!!t.c}function kr(t,e){var n,r,i=_typeof(e)==c?e.split(hn):[],o=function(t,e){var n,r,i=[],o=[];for(n=0;n<t.length;n++)i[t[n]]=!0;for(n=0;n<e.length;n++)i[e[n]]?delete i[e[n]]:i[e[n]]=!0;for(r in i)o.push(r);return o}(_typeof(t)==c?t.split(hn):[],i),a=O(sr,o);if(a>-1&&o.splice(a,1),o[d.l]>0)for(r=Zr(!0,!0),n=0;n<o.length;n++)if(!o[n].match(r))return!0;return!1}function Wr(t){S(t=t||ur,(function(t,e){if(v.inA(e,ur)>-1){var n=dt.attr(e);x(n)==c?yt.attr(e,n):yt.removeAttr(e)}}))}function Ir(){if(!rt){var t,e,n,r,i=!me,o=Ue.w,a=Ue.h,s={},c=Ut||i;return s["min-width"]=rn,s["min-height"]=rn,s.width=on,dt.css(s),t=Pt[d.oW],e=c?m.max(t,Pt[d.sW]-1):1,s.width=Ut?on:cn,s["min-width"]=cn,s.height=on,dt.css(s),n=Pt[d.oH],r=m.max(n,Pt[d.sH]-1),s.width=e,s.height=r,xt.css(s),s["min-width"]=o,s["min-height"]=a,dt.css(s),{_originalWidth:t,_originalHeight:n,_dynamicWidth:e,_dynamicHeight:r}}}function Nr(t){clearTimeout(ct),t=t||{},hr._hostSizeChanged|=t._hostSizeChanged,hr._contentSizeChanged|=t._contentSizeChanged,hr._force|=t._force;var e,r=v.now(),i=!!hr._hostSizeChanged,o=!!hr._contentSizeChanged,a=!!hr._force,s=t._changedOptions,c=B&&!M&&!a&&!s&&r-st<42&&!Xt&&!Ut;if(c&&(ct=setTimeout(Nr,42)),!(M||c||rt&&!s||B&&!a&&(e=pt.is(":hidden"))||"inline"===pt.css("display"))){st=r,hr={},!W||T.x&&T.y?N=fi({},y.nativeScrollbarSize):(N.x=0,N.y=0),Xe={x:3*(N.x+(T.x?0:3)),y:3*(N.y+(T.y?0:3))},s=s||{};var l=function(){return ui.apply(this,[].slice.call(arguments).concat([a]))},u={x:yt.scrollLeft(),y:yt.scrollTop()},f=at.scrollbars,h=at.textarea,_=f.visibility,b=l(_,ce),x=f.autoHide,O=l(x,le),S=f.clickScrolling,A=l(S,ue),L=f.dragScrolling,z=l(L,fe),k=at.className,R=l(k,pe),j=at.resize,D=l(j,he)&&!X,q=at.paddingAbsolute,F=l(q,Jt),V=at.clipAlways,Y=l(V,Zt),it=at.sizeAutoCapable&&!X,ot=l(it,oe),lt=at.nativeScrollbarsOverlaid.showNativeScrollbars,ut=l(lt,re),ft=at.autoUpdate,ht=l(ft,ie),St=at.overflowBehavior,Ct=l(St,ee,a),At=h.dynWidth,Lt=l(be,At),Tt=h.dynHeight,zt=l(ge,Tt);if(He="n"===x,Pe="s"===x,ke="m"===x,We="l"===x,Ee=f.autoHideDelay,ve=pe,Re="n"===j,je="b"===j,De="h"===j,qe="v"===j,de=at.normalizeRTL,lt=lt&&T.x&&T.y,ce=_,le=x,ue=S,fe=L,pe=k,he=j,Jt=q,Zt=V,oe=it,re=lt,ie=ft,ee=fi({},St),be=At,ge=Tt,Bt=Bt||{x:!1,y:!1},R&&(di(pt,ve+hn+sr),hi(pt,k!==n&&null!==k&&k.length>0?k:sr)),ht&&(!0===ft||null===ft&&P?(Sr(),w.add(C)):(w.remove(C),Or())),ot)if(it)if(wt?wt.show():(wt=g(oi("os-content-glue")),_t.before(wt)),$)vt.show();else{vt=g(oi("os-size-auto-observer")),Wt=vt[0],wt.before(vt);var Et={w:-1,h:-1};wr(vt,(function(){var t={w:Wt[d.oW],h:Wt[d.oH]};ui(t,Et)&&(B&&Xt&&t.h>0||Ut&&t.w>0||B&&!Xt&&0===t.h||!Ut&&0===t.w)&&Nr(),Et=t})),$=!0,null!==I&&vt.css(en,I+"(100% + 1px)")}else $&&vt.hide(),wt&&wt.hide();a&&(mt.find("*").trigger(sn),$&&vt.find("*").trigger(sn)),e=e===n?pt.is(":hidden"):e;var Ht,It=!!U&&"off"!==dt.attr("wrap"),Gt=l(It,me),ae=pt.css("direction"),se=l(ae,Kt),xe=pt.css("box-sizing"),Oe=l(xe,Vt),Se=Jr(Qe);try{Ht=$?Wt[d.bCR]():null}catch(t){return}Q="border-box"===xe;var Ce=(nt="rtl"===ae)?Ze:Ge,Te=nt?Ge:Ze,ze=!1,Ie=!(!$||"none"===pt.css(nn))&&(0===m.round(Ht.right-Ht.left)&&(!!q||kt[d.cW]-K>0));if(it&&!Ie){var Ne=kt[d.oW],Be=wt.css(tn);wt.css(tn,on);var Me=kt[d.oW];wt.css(tn,Be),(ze=Ne!==Me)||(wt.css(tn,Ne+1),Me=kt[d.oW],wt.css(tn,Be),ze=Ne!==Me)}var Ve=(Ie||ze)&&it&&!e,Ke=l(Ve,Ut),an=!Ve&&Ut,ln=!(!$||!it||e)&&0===m.round(Ht.bottom-Ht.top),un=l(ln,Xt),fn=!ln&&Xt,dn=Jr($e,"-width",!(Ve&&Q||!Q),!(ln&&Q||!Q)),pn=Jr(Ye),vn={},mn={},_n=function(){return{w:kt[d.cW],h:kt[d.cH]}},yn=function(){return{w:Nt[d.oW]+m.max(0,jt[d.cW]-jt[d.sW]),h:Nt[d.oH]+m.max(0,jt[d.cH]-jt[d.sH])}},gn=K=Se.l+Se.r,bn=G=Se.t+Se.b;if(gn*=q?1:0,bn*=q?1:0,Se.c=l(Se,Yt),J=dn.l+dn.r,Z=dn.t+dn.b,dn.c=l(dn,Qt),tt=pn.l+pn.r,et=pn.t+pn.b,pn.c=l(pn,$t),me=It,Kt=ae,Vt=xe,Ut=Ve,Xt=ln,Yt=Se,Qt=dn,$t=pn,se&&$&&vt.css(nn,Te),Se.c||se||F||Ke||un||Oe||ot){var wn={},xn={},On=[Se.t,Se.r,Se.b,Se.l];Gr(mn,Ye,[-Se.t,-Se.r,-Se.b,-Se.l]),q?(Gr(wn,rn,On),Gr(U?xn:vn,Qe)):(Gr(wn,rn),Gr(U?xn:vn,Qe,On)),_t.css(wn),dt.css(xn)}Ue=yn();var Sn=!!U&&Ir(),Cn=U&&l(Sn,ye),An=U&&Sn?{w:At?Sn._dynamicWidth:Sn._originalWidth,h:Tt?Sn._dynamicHeight:Sn._originalHeight}:{};if(ye=Sn,ln&&(un||F||Oe||Se.c||dn.c)?vn.height=on:(un||F)&&(vn.height=cn),Ve&&(Ke||F||Oe||Se.c||dn.c||se)?(vn.width=on,mn["max-width"]=cn):(Ke||F)&&(vn.width=cn,vn.float=rn,mn["max-width"]=rn),Ve?(mn.width=on,vn.width=p._cssPropertyValue(tn,"max-content intrinsic")||on,vn.float=Te):mn.width=rn,mn.height=ln?An.h||jt[d.cH]:rn,it&&wt.css(mn),gt.css(vn),vn={},mn={},i||o||Cn||se||Oe||F||Ke||Ve||un||ln||ut||Ct||Y||D||b||O||z||A||Lt||zt||Gt){var Ln="overflow",Tn="overflow-x",zn="overflow-y";if(!W){var En={},Hn=Bt.y&&Mt.ys&&!lt?T.y?yt.css(Ce):-N.y:0,jn=Bt.x&&Mt.xs&&!lt?T.x?yt.css(Je):-N.x:0;Gr(En,rn),yt.css(En)}var Dn=ii(),qn={w:An.w||Dn[d.cW],h:An.h||Dn[d.cH]},Fn={w:Dn[d.sW],h:Dn[d.sH]};W||(En.bottom=fn?rn:jn,En[Ce]=an?rn:Hn,yt.css(En)),Ue=yn();var Mn=_n(),Un={w:Mn.w-tt-J-(Q?0:K),h:Mn.h-et-Z-(Q?0:G)},Xn={w:m.max((Ve?qn.w:Fn.w)+gn,Un.w),h:m.max((ln?qn.h:Fn.h)+bn,Un.h)};if(Xn.c=l(Xn,te),te=Xn,it){(Xn.c||ln||Ve)&&(mn.width=Xn.w,mn.height=Xn.h,U||(qn={w:Dn[d.cW],h:Dn[d.cH]}));var Vn={},Yn=function(t){var e=Qr(t),n=e._w_h,r=e._width_height,i=t?Ve:ln,o=t?J:Z,a=t?K:G,s=t?tt:et,c=Ue[n]-o-s-(Q?0:a);(!i||!i&&dn.c)&&(mn[r]=Un[n]-1),!(i&&qn[n]<c)||t&&U&&It||(U&&(Vn[r]=ni(xt.css(r))-1),mn[r]-=1),qn[n]>0&&(mn[r]=m.max(1,mn[r]))};Yn(!0),Yn(!1),U&&xt.css(Vn),wt.css(mn)}Ve&&(vn.width=cn),!Ve||Q||Ae||(vn.float="none"),gt.css(vn),vn={};var Qn={w:Dn[d.sW],h:Dn[d.sH]};Qn.c=o=l(Qn,qt),qt=Qn,Ue=yn(),i=l(Mn=_n(),Dt),Dt=Mn;var $n=U&&(0===Ue.w||0===Ue.h),Kn=ne,Gn={},Jn={},Zn={},tr={},er={},ar={},cr={},lr=Nt[d.bCR](),ur=function(t){var e=Qr(t),n=Qr(!t)._x_y,r=e._x_y,i=e._w_h,o=e._width_height,a=sn+e._Left_Top+"Max",s=lr[o]?m.abs(lr[o]-Ue[i]):0,c=Kn&&Kn[r]>0&&0===Rt[a];Gn[r]="v-s"===St[r],Jn[r]="v-h"===St[r],Zn[r]="s"===St[r],tr[r]=m.max(0,m.round(100*(Qn[i]-Ue[i]))/100),tr[r]*=$n||c&&s>0&&s<1?0:1,er[r]=tr[r]>0,ar[r]=Gn[r]||Jn[r]?er[n]&&!Gn[n]&&!Jn[n]:er[r],ar[r+"s"]=!!ar[r]&&(Zn[r]||Gn[r]),cr[r]=er[r]&&ar[r+"s"]};if(ur(!0),ur(!1),tr.c=l(tr,ne),ne=tr,er.c=l(er,Bt),Bt=er,ar.c=l(ar,Mt),Mt=ar,T.x||T.y){var fr,dr={},pr={},vr=a;(er.x||er.y)&&(pr.w=T.y&&er.y?Qn.w+E.y:rn,pr.h=T.x&&er.x?Qn.h+E.x:rn,vr=l(pr,Ft),Ft=pr),(er.c||ar.c||Qn.c||se||Ke||un||Ve||ln||ut)&&(vn[Ye+Te]=vn[$e+Te]=rn,fr=function(t){var e=Qr(t),n=Qr(!t),r=e._x_y,i=t?Je:Ce,o=t?ln:Ve;T[r]&&er[r]&&ar[r+"s"]?(vn[Ye+i]=o?lt?rn:E[r]:rn,vn[$e+i]=t&&o||lt?rn:E[r]+"px solid transparent"):(pr[n._w_h]=vn[Ye+i]=vn[$e+i]=rn,vr=!0)},W?pi(yt,Bn,!lt):(fr(!0),fr(!1))),lt&&(pr.w=pr.h=rn,vr=!0),vr&&!W&&(dr.width=ar.y?pr.w:rn,dr.height=ar.x?pr.h:rn,bt||(bt=g(oi("os-content-arrange")),yt.prepend(bt)),bt.css(dr)),gt.css(vn)}var mr,_r={};wn={};if((i||er.c||ar.c||Qn.c||Ct||Oe||ut||se||Y||un)&&(_r[Te]=rn,(mr=function(t){var e=Qr(t),n=Qr(!t),r=e._x_y,i=e._X_Y,o=t?Je:Ce,a=function(){_r[o]=rn,Fe[n._w_h]=0};er[r]&&ar[r+"s"]?(_r[Ln+i]=sn,lt||W?a():(_r[o]=-(T[r]?E[r]:N[r]),Fe[n._w_h]=T[r]?E[n._x_y]:0)):(_r[Ln+i]=rn,a())})(!0),mr(!1),!W&&(Ue.h<Xe.x||Ue.w<Xe.y)&&(er.x&&ar.x&&!T.x||er.y&&ar.y&&!T.y)?(_r["padding-top"]=Xe.x,_r["margin-top"]=-Xe.x,_r[Qe+Te]=Xe.y,_r[Ye+Te]=-Xe.y):_r["padding-top"]=_r["margin-top"]=_r[Qe+Te]=_r[Ye+Te]=rn,_r[Qe+Ce]=_r[Ye+Ce]=rn,er.x&&ar.x||er.y&&ar.y||$n?U&&$n&&(wn[Tn]=wn[zn]="hidden"):(!V||Jn.x||Gn.x||Jn.y||Gn.y)&&(U&&(wn[Tn]=wn[zn]=rn),_r[Tn]=_r[zn]="visible"),_t.css(wn),yt.css(_r),_r={},(er.c||Oe||Ke||un)&&(!T.x||!T.y))){var yr=jt[d.s];yr.webkitTransform="scale(1)",yr.display="run-in",jt[d.oH],yr.display=rn,yr.webkitTransform=rn}if(vn={},se||Ke||un)if(nt&&Ve){var gr=gt.css(nn),br=m.round(gt.css(nn,rn).css(Ze,rn).position().left);gt.css(nn,gr),br!==m.round(gt.position().left)&&(vn.left=br)}else vn.left=rn;if(gt.css(vn),U&&o){var xr=function(){var t=Pt.selectionStart;if(t===n)return;var e,r,i=dt.val(),o=i[d.l],a=i.split("\n"),s=a[d.l],c=i.substr(0,t).split("\n"),l=0,u=0,f=c[d.l],h=c[c[d.l]-1][d.l];for(r=0;r<a[d.l];r++)(e=a[r][d.l])>u&&(l=r+1,u=e);return{_cursorRow:f,_cursorColumn:h,_rows:s,_columns:u,_widestRow:l,_cursorPosition:t,_cursorMax:o}}();if(xr){var Cr=_e===n||xr._rows!==_e._rows,Ar=xr._cursorRow,Lr=xr._cursorColumn,Tr=xr._widestRow,zr=xr._rows,Er=xr._columns,kr=xr._cursorPosition>=xr._cursorMax&&Le,Wr={x:It||Lr!==Er||Ar!==Tr?-1:ne.x,y:(It?kr||Cr&&Kn&&u.y===Kn.y:(kr||Cr)&&Ar===zr)?ne.y:-1};u.x=Wr.x>-1?nt&&de&&H.i?0:Wr.x:u.x,u.y=Wr.y>-1?Wr.y:u.y}_e=xr}nt&&H.i&&T.y&&er.x&&de&&(u.x+=Fe.w||0),Ve&&pt.scrollLeft(0),ln&&pt.scrollTop(0),yt.scrollLeft(u.x).scrollTop(u.y);var jr="v"===_,Dr="h"===_,qr="a"===_,Fr=function(t,e){e=e===n?t:e,Mr(!0,t,cr.x),Mr(!1,e,cr.y)};pi(pt,In,ar.x||ar.y),pi(pt,Nn,ar.x),pi(pt,Rn,ar.y),se&&!X&&pi(pt,Pn,nt),X&&hi(pt,kn),D&&(pi(pt,kn,Re),pi(Ot,nr,!Re),pi(Ot,rr,je),pi(Ot,ir,De),pi(Ot,or,qe)),(b||Ct||ar.c||er.c||ut)&&(lt?ut&&(di(pt,Wn),lt&&Fr(!1)):qr?Fr(cr.x,cr.y):jr?Fr(!0):Dr&&Fr(!1)),(O||ut)&&(Hr(!We&&!ke),Ur(He,!He)),(i||tr.c||un||Ke||D||Oe||F||ut||se)&&(Xr(!0),Vr(!0),Xr(!1),Vr(!1)),A&&Yr(!0,S),z&&Yr(!1,L),Kr("onDirectionChanged",{isRTL:nt,dir:ae},se),Kr("onHostSizeChanged",{width:Dt.w,height:Dt.h},i),Kr("onContentSizeChanged",{width:qt.w,height:qt.h},o),Kr("onOverflowChanged",{x:er.x,y:er.y,xScrollable:ar.xs,yScrollable:ar.ys,clipped:ar.x||ar.y},er.c||ar.c),Kr("onOverflowAmountChanged",{x:tr.x,y:tr.y},tr.c)}X&&we&&(Bt.c||we.c)&&(we.f||Pr(),T.y&&Bt.x&&gt.css("min-width",we.w+E.y),T.x&&Bt.y&&gt.css("min-height",we.h+E.x),we.c=!1),B&&s.updateOnLoad&&Rr(),Kr("onUpdated",{forced:a})}}function Rr(){U||li((function(t,e){gt.find(e).each((function(t,e){v.inA(e,pr)<0&&(pr.push(e),g(e).off(dr,Er).on(dr,Er))}))}))}function jr(t){var e=z._validate(t,z._template,!0,ot);return ot=fi({},ot,e._default),at=fi({},at,e._prepared),e._prepared}function Dr(t){var e=jn+hn+Qn,r=U?hn+Qn:rn,i=at.textarea.inheritedAttrs,o={},a=function(){var e=t?dt:pt;S(o,(function(t,n){x(n)==c&&(t==d.c?e.addClass(n):e.attr(t,n))}))},s=[An,Ln,Tn,kn,Pn,zn,En,Hn,Wn,In,Nn,Rn,sr,jn,Qn,pe].join(hn),l={};pt=pt||(U?Y?dt.parent().parent().parent().parent():g(oi(Tn)):dt),gt=gt||ai(Un+r),yt=yt||ai(Fn+r),_t=_t||ai(qn+r),mt=mt||ai("os-resize-observer-host"),xt=xt||(U?ai(Dn):n),Y&&hi(pt,Ln),t&&di(pt,s),i=x(i)==c?i.split(hn):i,v.isA(i)&&U&&S(i,(function(e,n){x(n)==c&&(o[n]=t?pt.attr(n):dt.attr(n))})),t?(Y&&B?(mt.children().remove(),S([_t,yt,gt,xt],(function(t,e){e&&di(e.removeAttr(d.s),cr)})),hi(pt,U?Tn:An)):(vi(mt),gt.contents().unwrap().unwrap().unwrap(),U&&(dt.unwrap(),vi(pt),vi(xt),a())),U&&dt.removeAttr(d.s),X&&di(ft,Cn)):(U&&(at.sizeAutoCapable||(l.width=dt.css(tn),l.height=dt.css(en)),Y||dt.addClass(Qn).wrap(pt),pt=dt.parent().css(l)),Y||(hi(dt,U?e:An),pt.wrapInner(gt).wrapInner(yt).wrapInner(_t).prepend(mt),gt=mi(pt,".os-content"),yt=mi(pt,".os-viewport"),_t=mi(pt,".os-padding"),U&&(gt.prepend(xt),a())),W&&hi(yt,Bn),T.x&&T.y&&hi(yt,Mn),X&&hi(ft,Cn),It=mt[0],kt=pt[0],Nt=_t[0],Rt=yt[0],jt=gt[0],Wr())}function qr(){var t,e,r=[112,113,114,115,116,117,118,119,120,121,123,33,34,37,38,39,40,16,17,18,19,20,144],i=[],o="focus";function a(e){Ir(),C.update(on),e&&P&&clearInterval(t)}U?(k>9||!P?br(dt,"input",a):br(dt,[wn,xn],[function(e){var n=e.keyCode;O(n,r)<0&&(i[d.l]||(a(),t=setInterval(a,1e3/60)),O(n,i)<0&&i.push(n))},function(t){var e=t.keyCode,n=O(e,i);O(e,r)<0&&(n>-1&&i.splice(n,1),i[d.l]||a(!0))}]),br(dt,[sn,"drop",o,"focusout"],[function(t){return dt.scrollLeft(H.i&&de?9999999:0),dt.scrollTop(0),v.prvD(t),v.stpP(t),!1},function(t){setTimeout((function(){M||a()}),50)},function(){Le=!0,hi(pt,o)},function(){Le=!1,i=[],di(pt,o),a(!0)}])):br(gt,Sn,(function(t){!0!==ie&&function(t){if(!B)return!0;var e="flex-grow",n="flex-shrink",r="flex-basis",i=[tn,"min-width","max-width","margin-left","margin-right",Ze,Ge,"font-weight","word-spacing",e,n,r],o=["padding-left","padding-right","border-leftwidth","border-rightwidth"],a=[en,"min-height","max-height","margin-top","margin-bottom",Ke,Je,"line-height",e,n,r],s=["padding-top","padding-bottom","border-topwidth","border-bottomwidth"],c="s"===ee.x||"v-s"===ee.x,l=!1,u=function(t,e){for(var n=0;n<t[d.l];n++)if(t[n]===e)return!0;return!1};return("s"===ee.y||"v-s"===ee.y)&&((l=u(a,t))||Q||(l=u(s,t))),c&&!l&&((l=u(i,t))||Q||(l=u(o,t))),l}((t=t.originalEvent||t).propertyName)&&C.update(on)})),br(yt,sn,(function(t){rt||(e!==n?clearTimeout(e):((Pe||ke)&&Ur(!0),ri()||hi(pt,Wn),Kr("onScrollStart",t)),Ne||(Vr(!0),Vr(!1)),Kr("onScroll",t),e=setTimeout((function(){M||(clearTimeout(e),e=n,(Pe||ke)&&Ur(!1),ri()||di(pt,Wn),Kr("onScrollStop",t))}),175))}),!0)}function Fr(t){var e,n,r=function(e){var n=ai("os-scrollbar "+(e?"os-scrollbar-horizontal":"os-scrollbar-vertical"),!0),r=ai($n,n),i=ai(Gn,n);return Y||t||(n.append(r),r.append(i)),{_scrollbar:n,_track:r,_handle:i}};function i(t){var e=Qr(t),n=e._scrollbar,i=e._track,o=e._handle;Y&&B?S([n,i,o],(function(t,e){di(e.removeAttr(d.s),cr)})):vi(n||r(t)._scrollbar)}t?(i(!0),i()):(e=r(!0),n=r(),St=e._scrollbar,Ct=e._track,At=e._handle,Lt=n._scrollbar,Tt=n._track,zt=n._handle,Y||(_t.after(Lt),_t.after(St)))}function Br(t){var e,r,i,o,a=Qr(t),s=a._info,c=Et.top!==Et,l=a._x_y,u=a._X_Y,f=sn+a._Left_Top,h="active",p="snapHandle",_="click",y=1,g=[16,17];function b(t){return k&&c?t["screen"+u]:v.page(t)[l]}function w(t){return at.scrollbars[t]}function x(){y=.5}function S(){y=1}function A(t){v.stpP(t)}function L(t){O(t.keyCode,g)>-1&&x()}function T(t){O(t.keyCode,g)>-1&&S()}function z(t){var e=(t.originalEvent||t).touches!==n;return!(rt||M||ri()||!fe||e&&!w("touchSupport"))&&(1===v.mBtn(t)||e)}function E(e){if(z(e)){var n=s._trackLength,a=s._handleLength,c=s._maxScroll*((b(e)-i)*o/(n-a));c=isFinite(c)?c:0,nt&&t&&!H.i&&(c*=-1),yt[f](m.round(r+c)),Ne&&Vr(t,r+c),D||v.prvD(e)}else P(e)}function P(s){if(s=s||s.originalEvent,gr(ut,[yn,_n,wn,xn,On],[E,P,L,T,zr],!0),v.rAF()((function(){gr(ut,_,A,!0,{_capture:!0})})),Ne&&Vr(t,!0),Ne=!1,di(ht,ar),di(a._handle,h),di(a._track,h),di(a._scrollbar,h),r=n,i=n,o=1,S(),e!==n&&(C.scrollStop(),clearTimeout(e),e=n),s){var c=kt[d.bCR]();s.clientX>=c.left&&s.clientX<=c.right&&s.clientY>=c.top&&s.clientY<=c.bottom||Lr(),(Pe||ke)&&Ur(!1)}}function W(e){r=yt[f](),r=isNaN(r)?0:r,(nt&&t&&!H.n||!nt)&&(r=r<0?0:r),o=ti()[l],i=b(e),Ne=!w(p),hi(ht,ar),hi(a._handle,h),hi(a._scrollbar,h),gr(ut,[yn,_n,On],[E,P,zr]),v.rAF()((function(){gr(ut,_,A,!1,{_capture:!0})})),!k&&V||v.prvD(e),v.stpP(e)}br(a._handle,mn,(function(t){z(t)&&W(t)})),br(a._track,[mn,gn,bn],[function(r){if(z(r)){var c,u=a._info._handleLength/Math.round(m.min(1,Ue[a._w_h]/qt[a._w_h])*a._info._trackLength),d=m.round(Ue[a._w_h]*u),_=270*u,g=400*u,b=a._track.offset()[a._left_top],O=r.ctrlKey,S=r.shiftKey,A=S&&O,E=!0,k=function(e){Ne&&Vr(t,e)},I=function(){k(),W(r)};O&&x(),o=ti()[l],i=v.page(r)[l],Ne=!w(p),hi(ht,ar),hi(a._track,h),hi(a._scrollbar,h),gr(ut,[_n,wn,xn,On],[P,L,T,zr]),function r(){if(!M){var a=(i-b)*o,u=s._handleOffset,h=s._trackLength,p=s._handleLength,v=s._maxScroll,w=s._currentScroll,x=_*y,O=E?m.max(g,x):x,L=v*((a-p/2)/(h-p)),T=nt&&t&&(!H.i&&!H.n||de),z=T?u<a:u>a,P={},W={easing:"linear",step:function(e){Ne&&(yt[f](e),Vr(t,e))}};L=isFinite(L)?L:0,L=nt&&t&&!H.i?v-L:L,S?(yt[f](L),A?(L=yt[f](),yt[f](w),L=T&&H.i?v-L:L,L=T&&H.n?-L:L,P[l]=L,C.scroll(P,fi(W,{duration:130,complete:I}))):I()):(c=E?z:c,(T?c?u+p>=a:u<=a:c?u<=a:u+p>=a)?(clearTimeout(e),C.scrollStop(),e=n,k(!0)):(e=setTimeout(r,O),P[l]=(c?"-=":"+=")+d,C.scroll(P,fi(W,{duration:x}))),E=!1)}}(),v.prvD(r),v.stpP(r)}},function(t){Ie=!0,(Pe||ke)&&Ur(!0)},function(t){Ie=!1,(Pe||ke)&&Ur(!1)}]),br(a._scrollbar,mn,(function(t){v.stpP(t)})),R&&br(a._scrollbar,Sn,(function(e){e.target===a._scrollbar[0]&&(Xr(t),Vr(t))}))}function Mr(t,e,n){var r=t?St:Lt;pi(pt,t?zn:En,!e),pi(r,Zn,!n)}function Ur(t,e){if(clearTimeout(Te),t)di(St,tr),di(Lt,tr);else{var n,r="active",i=function(){Ie||M||(!(n=At.hasClass(r)||zt.hasClass(r))&&(Pe||ke||We)&&hi(St,tr),!n&&(Pe||ke||We)&&hi(Lt,tr))};Ee>0&&!0!==e?Te=setTimeout(i,Ee):i()}}function Xr(t){var e={},n=Qr(t),r=n._info,i=1e6,o=m.min(1,Ue[n._w_h]/qt[n._w_h]);e[n._width_height]=m.floor(100*o*i)/i+"%",ri()||n._handle.css(e),r._handleLength=n._handle[0]["offset"+n._Width_Height],r._handleLengthRatio=o}function Vr(t,e){var r,i,o=x(e)==l,a=nt&&t,s=Qr(t),c=s._info,u="translate(",f=p._cssProperty("transform"),h=p._cssProperty("transition"),v=t?yt.scrollLeft():yt.scrollTop(),_=e===n||o?v:e,y=c._handleLength,g=s._track[0]["offset"+s._Width_Height],b=g-y,w={},O=(Rt[sn+s._Width_Height]-Rt["client"+s._Width_Height])*(H.n&&a?-1:1),S=function(t){return isNaN(t/O)?0:m.max(0,m.min(1,t/O))},C=function(t){var e=b*t;return e=isNaN(e)?0:e,e=a&&!H.i?g-y-e:e,e=m.max(0,e)},A=S(v),L=C(S(_)),T=C(A);c._maxScroll=O,c._currentScroll=v,c._currentScrollRatio=A,j?(r=a?-(g-y-L):L,i=t?u+r+"px, 0)":"translate(0, "+r+"px)",w[f]=i,R&&(w[h]=o&&m.abs(L-c._handleOffset)>1?function(t){var e=p._cssProperty("transition"),n=t.css(e);if(n)return n;for(var r,i,o,a="\\s*(([^,(]+(\\(.+?\\))?)+)[\\s,]*",s=new RegExp(a),c=new RegExp("^("+a+")+$"),l="property duration timing-function delay".split(" "),u=[],f=0,h=function(t){if(r=[],!t.match(c))return t;for(;t.match(s);)r.push(RegExp.$1),t=t.replace(s,rn);return r};f<l[d.l];f++)for(i=h(t.css(e+"-"+l[f])),o=0;o<i[d.l];o++)u[o]=(u[o]?u[o]+hn:rn)+i[o];return u.join(", ")}(s._handle)+", "+(f+hn+250)+"ms":rn)):w[s._left_top]=L,ri()||(s._handle.css(w),j&&R&&o&&s._handle.one(Sn,(function(){M||s._handle.css(h,rn)}))),c._handleOffset=L,c._snappedHandleOffset=T,c._trackLength=g}function Yr(t,e){var n=e?"removeClass":"addClass",r=t?Tt:zt,i=t?Kn:Jn;(t?Ct:At)[n](i),r[n](i)}function Qr(t){return{_width_height:t?tn:en,_Width_Height:t?"Width":"Height",_left_top:t?Ze:Ke,_Left_Top:t?"Left":"Top",_x_y:t?ln:un,_X_Y:t?"X":"Y",_w_h:t?"w":"h",_l_t:t?"l":"t",_track:t?Ct:Tt,_handle:t?At:zt,_scrollbar:t?St:Lt,_info:t?Be:Me}}function $r(t){Ot=Ot||ai(er,!0),t?Y&&B?di(Ot.removeAttr(d.s),cr):vi(Ot):Y||pt.append(Ot)}function Kr(t,e,n){if(!1!==n)if(B){var r,i=at.callbacks[t],o=t;"on"===o.substr(0,2)&&(o=o.substr(2,1).toLowerCase()+o.substr(3)),x(i)==a&&i.call(C,e),S(fr,(function(){x((r=this).on)==a&&r.on(o,e)}))}else M||lr.push({n:t,a:e})}function Gr(t,e,n){n=n||[rn,rn,rn,rn],t[(e=e||rn)+Ke]=n[0],t[e+Ge]=n[1],t[e+Je]=n[2],t[e+Ze]=n[3]}function Jr(t,e,n,r){return e=e||rn,t=t||rn,{t:r?0:ni(pt.css(t+Ke+e)),r:n?0:ni(pt.css(t+Ge+e)),b:r?0:ni(pt.css(t+Je+e)),l:n?0:ni(pt.css(t+Ze+e))}}function Zr(t,e){var n,r,i,o=function(t,e){if(i="",e&&_typeof(t)==c)for(r=t.split(hn),n=0;n<r[d.l];n++)i+="|"+r[n]+"$";return i};return new RegExp("(^"+An+"([-_].+|)$)"+o(pe,t)+o(ve,e),"g")}function ti(){var t=Nt[d.bCR]();return{x:j&&1/(m.round(t.width)/Nt[d.oW])||1,y:j&&1/(m.round(t.height)/Nt[d.oH])||1}}function ei(e){var n=e&&e.ownerDocument&&e.ownerDocument.parentWindow||t;return _typeof(n.HTMLElement)==o?e instanceof n.HTMLElement:e&&_typeof(e)==o&&null!==e&&1===e.nodeType&&_typeof(e.nodeName)==c}function ni(t,e){var n=e?parseFloat(t):parseInt(t,10);return isNaN(n)?0:n}function ri(){return re&&T.x&&T.y}function ii(){return U?xt[0]:jt}function oi(t,e){return"<div "+(t?x(t)==c?'class="'+t+'"':function(){var e,n=rn;if(g.isPlainObject(t))for(e in t)n+=("c"===e?"class":e)+'="'+t[e]+'" ';return n}():rn)+">"+(e||rn)+"</div>"}function ai(t,e){var n=x(e)==l,r=n?pt:e||pt;return Y&&!r[d.l]?null:Y?r[n?"children":"find"](fn+t.replace(/\s/g,fn)).eq(0):g(oi(t))}function si(t,e){for(var n,r=e.split(fn),i=0;i<r.length;i++){if(!t[d.hOP](r[i]))return;n=t[r[i]],i<r.length&&x(n)==o&&(t=n)}return n}function ci(t,e,n){for(var r=e.split(fn),i=r.length,o=0,a={},s=a;o<i;o++)a=a[r[o]]=o+1<i?{}:n;g.extend(t,s,!0)}function li(t){var e=at.updateOnLoad;e=x(e)==c?e.split(hn):e,v.isA(e)&&!M&&S(e,t)}function ui(t,e,n){if(n)return n;if(x(t)!=o||x(e)!=o)return t!==e;for(var r in t)if("c"!==r){if(!t[d.hOP](r)||!e[d.hOP](r))return!0;if(ui(t[r],e[r]))return!0}return!1}function fi(){return g.extend.apply(this,[!0].concat([].slice.call(arguments)))}function hi(t,e){return A.addClass.call(t,e)}function di(t,e){return A.removeClass.call(t,e)}function pi(t,e,n){return n?hi(t,e):di(t,e)}function vi(t){return A.remove.call(t)}function mi(t,e){return A.find.call(t,e).eq(0)}}return(r=t.OverlayScrollbars=function(t,e,o){if(0===arguments[d.l])return this;var s,c,l=[],u=g.isPlainObject(e);return t?(t=t[d.l]!=n?t:[t[0]||t],E(),t[d.l]>0&&(u?g.each(t,(function(t,r){(s=r)!==n&&l.push(k(s,e,o,i,f))})):g.each(t,(function(t,i){s=b(i),("!"===e&&r.valid(s)||v.type(e)==a&&e(i,s)||e===n)&&l.push(s)})),c=1===l[d.l]?l[0]:l),c):u||!e?c:l}).globals=function(){E();var t=g.extend(!0,{},i);return delete t.msie,t},r.defaultOptions=function(t){E();var e=i.defaultOptions;if(t===n)return g.extend(!0,{},e);i.defaultOptions=g.extend(!0,{},e,z._validate(t,z._template,!0,e)._default)},r.valid=function(t){return t instanceof r&&!t.getState().destroyed},r.extension=function(t,e,n){var r=v.type(t)==c,i=arguments[d.l],o=0;if(i<1||!r)return g.extend(!0,{length:T[d.l]},T);if(r)if(v.type(e)==a)T.push({name:t,extensionFactory:e,defaultOptions:n});else for(;o<T[d.l];o++)if(T[o].name===t){if(!(i>1))return g.extend(!0,{},T[o]);T.splice(o,1)}},r}();return _&&_.fn&&(_.fn.overlayScrollbars=function(t,e){var n=this;return _.isPlainObject(t)?(_.each(n,(function(){w(this,t,e)})),n):w(n,t)}),w}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
